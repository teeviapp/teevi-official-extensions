var teevi=(function(){"use strict";async function I(e){const t=S(e);if(t.length===0)throw new Error(`No valid server candidates found for input: "${e}". Please verify the URL format.`);const a=await y(t);if(!a)throw new Error(`No server found for input "${e}". Please verify the URL format and try again.`);return{address:a.LocalAddress.endsWith("/")?a.LocalAddress:a.LocalAddress+"/"}}async function y(e){for(const t of e)try{const a=new URL("System/Info/Public",t),r=await fetch(a.toString());if(r.ok)return await r.json()}catch{}}function S(e){const t=new URL(v(e));if(t.protocol&&t.port)return[t.toString()];const a=[];return a.push(u(t,"http:",80)),a.push(u(t,"https:",443)),t.protocol==="http:"?a.push(u(t,"http:",8096)):t.protocol==="https:"&&(a.push(u(t,"https:",8096)),a.push(u(t,"https:",8920))),a.sort((r,n)=>r.score-n.score).map(r=>r.url.toString())}function u(e,t,a){function r(s){if(s==="http:")return 80;if(s==="https:")return 443;throw new Error("Invalid protocol")}const n=new URL(e.toString());n.protocol=t,n.port||(n.port=String(a));let o=t==="https:"?5:-5;return n.port===""||n.port===r(t).toString()?o+=3:e.port==="8096"?o+=2:e.port==="8920"&&(o-=1),{url:n,score:o}}function v(e){if(e=e.trim(),/^(data:|view-source:)/i.test(e))throw new Error("Unsupported URL protocol");/^(https?:)?\/\//i.test(e)?/^\/\//.test(e)&&(e="http:"+e):e="http://"+e;let t;try{t=new URL(e)}catch{throw new Error("Invalid URL")}if(t.pathname){const a=decodeURI(t.pathname.replace(/\/{2,}/g,"/"));t.pathname=a.endsWith("/")?a:a+"/"}return t.hostname&&(t.hostname=t.hostname.replace(/\.$/,"")),t.protocol=t.protocol.toLowerCase(),t.hostname=t.hostname.toLowerCase(),t.toString()}const m={client:{name:"Teevi for Jellyfin",version:"10.10.6"},device:{name:"Teevi",id:"Tv-"+Math.random().toString(36).substring(2,11)}};async function P(e,t){const a=new URL("Users/AuthenticateByName",e.toString()),r=await fetch(a.toString(),{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json",...c()},body:JSON.stringify({Username:t.username,Pw:t.password})});if(!r.ok)throw new Error("Authentication failed"+r.statusText);const n=await r.json();return{AccessToken:n.AccessToken,User:{Id:n.User.Id}}}function c(e){const t=[`MediaBrowser Client="${m.client.name}"`,`Device="${m.device.name}"`,`DeviceId="${m.device.id}"`,`Version="${m.client.version}"`];return e&&t.push(`Token="${e}"`),{Authorization:t.join(", ")}}async function l(e,t,a){const r=new URL(`Users/${t.User.Id}/Items`,e);r.searchParams.append("Recursive","true"),r.searchParams.append("SortBy","Name"),r.searchParams.append("SortOrder","Descending"),r.searchParams.append("enableImageTypes","Primary,Backdrop,Logo,Banner"),r.searchParams.append("Fields","Genres,Overview,Taglines"),a.isFavorite&&a.isFavorite===!0&&r.searchParams.append("Filters","IsFavorite"),a.searchTerm&&r.searchParams.append("searchTerm",a.searchTerm),a.collectionId&&r.searchParams.append("ParentId",a.collectionId),a.genreId&&r.searchParams.append("GenreIds",a.genreId),r.searchParams.append("IncludeItemTypes","Movie,Series");const n=await fetch(r.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!n.ok)throw new Error("Failed to fetch collection: "+n.statusText);return(await n.json()).Items.filter(({Type:s})=>s==="Movie"||s==="Series")}async function U(e,t,a){const r=new URL(`Items/${a}/Similar`,e);r.searchParams.append("userId",t.User.Id);const n=await fetch(r.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!n.ok)throw new Error("Failed to fetch similar items: "+n.statusText);return(await n.json()).Items.filter(({Type:s})=>s==="Movie"||s==="Series")}async function E(e,t,a){const r=new URL(`Users/${t.User.Id}/Items/${a}`,e),n=await fetch(r.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!n.ok)throw new Error("Failed to fetch show: "+n.statusText);return n.json()}async function R(e,t){const a=new URL("UserViews",e);a.searchParams.append("userId",t.User.Id);const r=await fetch(a.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!r.ok)throw new Error("Failed to fetch library: "+r.statusText);return(await r.json()).Items.filter(({CollectionType:o})=>["tvshows","movies"].includes(o)).map(({Id:o,Name:s,CollectionType:i})=>({Id:o,Name:s,CollectionType:i}))}async function w(e,t,a){const r=new URL(`Shows/${a}/Seasons`,e);r.searchParams.append("userId",t.User.Id);const n=await fetch(r.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!n.ok)throw new Error("Failed to fetch seasons: "+n.statusText);return(await n.json()).Items.sort((s,i)=>s.IndexNumber-i.IndexNumber)}async function A(e,t,a,r){const n=new URL(`Shows/${a}/Episodes`,e);n.searchParams.append("seasonId",r),n.searchParams.append("userId",t.User.Id),n.searchParams.append("Fields","Overview");const o=await fetch(n.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!o.ok)throw new Error("Failed to fetch episodes: "+o.statusText);return(await o.json()).Items.sort((i,q)=>i.IndexNumber-q.IndexNumber)}async function b(e,t){const a=new URL("Genres",e);a.searchParams.append("userId",t.User.Id),a.searchParams.append("SortBy","SortName"),a.searchParams.append("SortOrder","Ascending"),a.searchParams.append("Recursive","true"),a.searchParams.append("EnableTotalRecordCount","false"),a.searchParams.append("IncludeItemTypes","Movie,Series");const r=await fetch(a.toString(),{method:"GET",headers:{Accept:"application/json",...c(t.AccessToken)}});if(!r.ok)throw new Error("Failed to fetch genres: "+r.statusText);return(await r.json()).Items.map(o=>({Id:o.Id,Name:o.Name}))}function C(e){const{server:t,itemId:a,imageId:r,quality:n,type:o}=e,s=new URL(`Items/${a}/Images/${o}`,t);switch(s.searchParams.append("tag",r),n){case"low":s.searchParams.append("maxWidth","200"),s.searchParams.append("quality","70");break;case"medium":s.searchParams.append("maxWidth","500"),s.searchParams.append("quality","80");break;case"high":s.searchParams.append("maxWidth","1000"),s.searchParams.append("quality","90");break}return s.toString()}async function _(e,t,a){const r=await L(e,t,a);if(!r)throw new Error("No media source found for item: "+a);return F(e,a,{supportsDirectStream:r.SupportsDirectStream,container:r.Container,transcodingUrl:r.TranscodingUrl})}async function L(e,t,a){const r=new URL(`Items/${a}/PlaybackInfo`,e),n=await fetch(r.toString(),{method:"POST",headers:{Accept:"application/json",...c(t.AccessToken),"Content-Type":"application/json"},body:JSON.stringify({UserId:t.User.Id,AlwaysBurnInSubtitleWhenTranscoding:!1,DeviceProfile:k,EnableDirectPlay:!0,EnableDirectStream:!0,EnableTranscoding:!0})});if(!n.ok)throw new Error("Failed to fetch playback info: "+n.statusText);const o=await n.json();if(console.debug("Playback info response:",o),!o.MediaSources||o.MediaSources.length===0)throw new Error("No media sources found");return o.MediaSources[0]}function F(e,t,a){if(a.supportsDirectStream){const r=new URL(`Videos/${t}/stream`,e);return a.container&&(r.pathname+=`.${a.container}`),a.supportsDirectStream&&r.searchParams.set("Static","true"),r.toString()}if(a.transcodingUrl)return new URL(a.transcodingUrl,e).toString();throw new Error("Video source configuration error: direct stream support is disabled and no transcoding URL was provided.")}const k={DirectPlayProfiles:[{Container:"mp4",Type:"Video",VideoCodec:"h261,hevc,mpeg4,h264",AudioCodec:"aac,ac3,eac3,flac,alac"},{Container:"m4v",Type:"Video",VideoCodec:"h264,mpeg4",AudioCodec:"aac,ac3,alac"},{Container:"mov",Type:"Video",VideoCodec:"h264,hevc,mjpeg4,mpeg4",AudioCodec:"aac,ac3,alac,eac3,mp3,pcm_s16be,pcm_s16le,pcm_s24be,pcm_s24le"},{Container:"mpegts",Type:"Video",VideoCodec:"h264",AudioCodec:"aac,ac3,eac3,mp3"},{Container:"3gp",Type:"Video",VideoCodec:"h264,mpeg4",AudioCodec:"aac,amr_nb"},{Container:"3g2",Type:"Video",VideoCodec:"h264,mpeg4",AudioCodec:"aac,amr_nb"},{Container:"avi",Type:"Video",VideoCodec:"mjpeg",AudioCodec:"pcm_mulaw,pcm_s16le"}],TranscodingProfiles:[{Container:"mp4",Type:"Video",AudioCodec:"aac,ac3,alac,eac3,flac",VideoCodec:"hevc,h264,mpeg4",Context:"Streaming",Protocol:"hls",MaxAudioChannels:"8",MinSegments:"2",BreakOnNonKeyFrames:!0,EnableSubtitlesInManifest:!0}],SubtitleProfiles:[{Format:"cc_dec",Method:"Embed"},{Format:"ttml",Method:"Embed"},{Format:"dvbsub",Method:"Encode"},{Format:"dvdsub",Method:"Encode"},{Format:"pgssub",Method:"Encode"},{Format:"xsub",Method:"Encode"},{Format:"vtt",Method:"Hls"}]},d={AUTH_INPUT:"jellyfin.auth.input",AUTH_RESPONSE:"jellyfin.auth.response",SERVER_ADDRESS:"jellyfin.auth.server.address"};async function p(){const e={server:Teevi.getInputValueById("server")??"",username:Teevi.getInputValueById("username")??"",password:Teevi.getInputValueById("password")??""};if(!e.server||!e.username)throw new Error("Server and Username are required");const t=N(e);return t||D(e)}function N(e){if(typeof localStorage>"u")return null;const t=localStorage.getItem(d.AUTH_INPUT),a=localStorage.getItem(d.AUTH_RESPONSE),r=localStorage.getItem(d.SERVER_ADDRESS);return t&&a&&r&&t===JSON.stringify(e)?{server:new URL(r),auth:JSON.parse(a)}:null}async function D(e){console.debug("Starting authentication with Jellyfin server",{server:e.server,username:e.username});const t=await I(e.server),a=new URL(t.address),r=await P(a,{username:e.username,password:e.password});return typeof localStorage<"u"&&(localStorage.setItem(d.AUTH_INPUT,JSON.stringify(e)),localStorage.setItem(d.SERVER_ADDRESS,t.address),localStorage.setItem(d.AUTH_RESPONSE,JSON.stringify(r))),{server:a,auth:r}}function f(e,t){var a;return{kind:e.Type==="Movie"?"movie":"series",id:e.Id,title:e.Name,posterURL:h({imageTag:(a=e.ImageTags)==null?void 0:a.Primary,server:t,itemId:e.Id,type:"Primary",quality:"low"}),year:j(e)}}function T(e,t){var a,r,n;return{kind:e.Type==="Movie"?"movie":"series",id:e.Id,title:e.Name,overview:e.Overview??"",releaseDate:V(e),genres:e.Genres??[],duration:g(e.RunTimeTicks),posterURL:h({imageTag:(a=e.ImageTags)==null?void 0:a.Primary,server:t,itemId:e.Id,type:"Primary",quality:"high"}),backdropURL:h({imageTag:(r=e.BackdropImageTags)==null?void 0:r[0],server:t,itemId:e.Id,type:"Backdrop",quality:"high"}),logoURL:h({imageTag:(n=e.ImageTags)==null?void 0:n.Logo,server:t,itemId:e.Id,type:"Logo",quality:"high"}),rating:e.CommunityRating}}function O(e,t){var a;return{id:e.Id,number:e.IndexNumber,title:e.Name,thumbnailURL:h({imageTag:(a=e.ImageTags)==null?void 0:a.Primary,server:t,itemId:e.Id,type:"Primary",quality:"low"}),overview:e.Overview??"",duration:g(e.RunTimeTicks)}}function j(e){return e.PremiereDate?new Date(e.PremiereDate).getFullYear():e.ProductionYear}function V(e){return e.PremiereDate?new Date(e.PremiereDate).toISOString().split("T")[0]:new Date().toISOString().split("T")[0]}function g(e){return e?Math.round(e/1e7):0}function h(e){const{imageTag:t,server:a,itemId:r,type:n,quality:o}=e;if(t)return C({server:a,itemId:r,imageId:t,type:n,quality:o})}async function x(e){const t=await p();return(await l(t.server,t.auth,{searchTerm:e})).map(r=>f(r,t.server))}async function M(e){const t=await p(),a=await E(t.server,t.auth,e),r=T(a,t.server);a.Type==="Series"&&(r.seasons=await H(t,a.Id));try{const n=await U(t.server,t.auth,a.Id);r.relatedShows=n.map(o=>f(o,t.server))}catch(n){console.error("Failed to fetch similar shows:",n),r.relatedShows=[]}return r}async function H(e,t){return(await w(e.server,e.auth,t)).filter(r=>r.IndexNumber!==void 0).map(r=>({name:r.Name,number:r.IndexNumber}))}async function $(e,t){var s;const a=await p(),n=(s=(await w(a.server,a.auth,e)).find(i=>i.IndexNumber===t))==null?void 0:s.Id;if(!n)throw new Error(`Season ${t} not found`);return(await A(a.server,a.auth,e,n)).map(i=>O(i,a.server))}async function J(){const e=await p(),t=await R(e.server,e.auth),a=await b(e.server,e.auth);let r=[];for(const n of t){const s=(await l(e.server,e.auth,{collectionId:n.Id})).map(i=>f(i,e.server));r.push({id:n.Id,name:n.Name,shows:s,category:n.CollectionType==="tvshows"?"series":"movies"})}for(const n of a){const s=(await l(e.server,e.auth,{genreId:n.Id})).map(i=>f(i,e.server));r.push({id:`genre-${n.Id}`,name:n.Name,shows:s})}return r}async function B(){const e=await p();return(await l(e.server,e.auth,{isFavorite:!0})).map(a=>{var n;let r=T(a,e.server);return r.overview=((n=a.Taglines)==null?void 0:n[0])??r.overview,r})}async function G(e){const t=await p();return[{url:await _(t.server,t.auth,e)}]}return{fetchShowsByQuery:x,fetchShow:M,fetchEpisodes:$,fetchFeedCollections:J,fetchTrendingShows:B,fetchVideoAssets:G}})();
